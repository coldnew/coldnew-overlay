From eef15d0a3469023c915462cf14975160b5044b3f Mon Sep 17 00:00:00 2001
From: lordgeorg <lordgeorg@googlemail.com>
Date: Mon, 29 Apr 2019 00:53:53 +0200
Subject: [PATCH] Mostly compatibility to glbinding v3

---
 source/examples/CMakeLists.txt                | 43 +---------------
 source/examples/commandlineoutput/main.cpp    |  9 ++--
 source/examples/computeshader/datapath.inl    | 38 +++++---------
 source/examples/computeshader/main.cpp        | 14 +++---
 source/examples/programpipelines/main.cpp     |  9 ++--
 source/examples/qtexample/datapath.inl        | 38 +++++---------
 source/examples/qtexample/main.cpp            | 15 +++---
 source/examples/shaderincludes/datapath.inl   | 38 +++++---------
 source/examples/shaderincludes/main.cpp       | 16 +++---
 source/examples/sparsetexture/datapath.inl    | 38 +++++---------
 source/examples/sparsetexture/main.cpp        |  9 ++--
 source/examples/ssbo/datapath.inl             | 38 +++++---------
 source/examples/ssbo/main.cpp                 | 14 +++---
 source/examples/states/datapath.inl           | 38 +++++---------
 source/examples/states/main.cpp               | 16 +++---
 source/examples/tessellation/datapath.inl     | 38 +++++---------
 source/examples/tessellation/main.cpp         | 24 ++++-----
 source/examples/texture/main.cpp              |  9 ++--
 .../examples/transformfeedback/datapath.inl   | 38 +++++---------
 source/examples/transformfeedback/main.cpp    | 20 ++++----
 source/globjects/CMakeLists.txt               |  1 +
 source/globjects/source/Framebuffer.cpp       |  8 +--
 .../source/FramebufferAttachment.cpp          |  4 +-
 source/globjects/source/glbindinglogging.cpp  | 49 ++++++++++---------
 source/globjects/source/globjects.cpp         | 25 ++++------
 .../DebugImplementation_DebugKHR.cpp          |  2 +-
 .../DebugImplementation_Legacy.cpp            |  2 +-
 .../source/registry/ExtensionRegistry.cpp     | 28 +++++++----
 28 files changed, 231 insertions(+), 390 deletions(-)

diff --git a/source/examples/CMakeLists.txt b/source/examples/CMakeLists.txt
index d1fe1aaf..d6992eb3 100644
--- a/source/examples/CMakeLists.txt
+++ b/source/examples/CMakeLists.txt
@@ -4,48 +4,7 @@ if(NOT OPTION_BUILD_EXAMPLES)
     return()
 endif()
 
-
-# 
-# Configuration for all sub-projects
-# 
-
-# External packages
-find_package(cpplocate)
-
-if (NOT cpplocate_FOUND)
-    message("Examples skipped: cpplocate not found")
-    return()
-endif()
-
-
-# 
-# Module information file
-# 
-
-generate_module_info(${META_PROJECT_NAME}
-    VALUES
-    name        "${META_PROJECT_NAME}"
-    version     "${META_VERSION}"
-    description "${META_PROJECT_DESCRIPTION}"
-    author      "${META_AUTHOR_ORGANIZATION}"
-
-    BUILD_VALUES
-    dataPath    "${PROJECT_SOURCE_DIR}/data"
-
-    INSTALL_VALUES
-    dataPath    "\${ModulePath}/data"
-)
-
-export_module_info(${META_PROJECT_NAME}
-    TARGET ${META_PROJECT_NAME}
-    FOLDER "ModuleInfo"
-)
-
-install_module_info(${META_PROJECT_NAME}
-    DESTINATION ${INSTALL_ROOT}
-    COMPONENT examples_data
-)
-
+find_package(cpplocate REQUIRED)
 
 #
 # Examples
diff --git a/source/examples/commandlineoutput/main.cpp b/source/examples/commandlineoutput/main.cpp
index 3d66b29e..73da5cb0 100644
--- a/source/examples/commandlineoutput/main.cpp
+++ b/source/examples/commandlineoutput/main.cpp
@@ -2,8 +2,9 @@
 #include <iostream>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
+#include <glbinding-aux/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -60,9 +61,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     std::cout << std::endl;
     std::cout << "Test Logging of Standard Types:" << std::endl;
diff --git a/source/examples/computeshader/datapath.inl b/source/examples/computeshader/datapath.inl
index 9a93c336..bd1f302c 100644
--- a/source/examples/computeshader/datapath.inl
+++ b/source/examples/computeshader/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/computeshader", "share/globjects/computeshader", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/computeshader/main.cpp b/source/examples/computeshader/main.cpp
index ba33cac8..b3980faa 100644
--- a/source/examples/computeshader/main.cpp
+++ b/source/examples/computeshader/main.cpp
@@ -3,7 +3,6 @@
 #include <algorithm>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
 
 #include <glm/gtc/constants.hpp>
 #include <glm/vec2.hpp>
@@ -11,8 +10,9 @@
 #include <glbinding/gl/gl.h>
 #include <glbinding/gl/extension.h>
 #include <glbinding/gl/bitfield.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -57,8 +57,8 @@ void initialize()
 
     g_computeProgram = new globjects::Program();
 
-    const auto dataPath = common::retrieveDataPath("globjects", "dataPath");
-    g_computeProgram->attach(globjects::Shader::fromFile(GL_COMPUTE_SHADER, dataPath + "computeshader/cstest.comp"));
+    const auto dataPath = common::determineDataPath();
+    g_computeProgram->attach(globjects::Shader::fromFile(GL_COMPUTE_SHADER, dataPath + "/computeshader/cstest.comp"));
     g_computeProgram->setUniform("destTex", 0);
     g_computeProgram->ref();
 
@@ -153,9 +153,9 @@ int main()
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     globjects::DebugMessage::enable();
 
diff --git a/source/examples/programpipelines/main.cpp b/source/examples/programpipelines/main.cpp
index 0613f67e..351f33a2 100644
--- a/source/examples/programpipelines/main.cpp
+++ b/source/examples/programpipelines/main.cpp
@@ -4,8 +4,9 @@
 #include <glm/vec2.hpp>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -164,9 +165,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     glfwGetFramebufferSize(window, &g_size[0], &g_size[1]);
     initialize();
diff --git a/source/examples/qtexample/datapath.inl b/source/examples/qtexample/datapath.inl
index 9a93c336..1e606413 100644
--- a/source/examples/qtexample/datapath.inl
+++ b/source/examples/qtexample/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/qt-example", "share/globjects/qt-example", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/qtexample/main.cpp b/source/examples/qtexample/main.cpp
index 48479fd2..46749258 100644
--- a/source/examples/qtexample/main.cpp
+++ b/source/examples/qtexample/main.cpp
@@ -15,8 +15,9 @@
 #include <glm/gtx/transform.hpp>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <globjects/globjects.h>
 #include <globjects/base/File.h>
@@ -53,9 +54,9 @@ public:
         globjects::init();
 
         std::cout << std::endl
-            << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-            << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-            << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+            << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+            << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+            << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
         globjects::DebugMessage::enable();
 
@@ -70,10 +71,10 @@ public:
         m_program = new globjects::Program();
         m_vao = new globjects::VertexArray();
 
-        const auto dataPath = common::retrieveDataPath("globjects", "dataPath");
+        const auto dataPath = common::determineDataPath();
         m_program->attach(
-            globjects::Shader::fromFile(GL_VERTEX_SHADER,  dataPath +  "qt-example/shader.vert"),
-            globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "qt-example/shader.frag"));
+            globjects::Shader::fromFile(GL_VERTEX_SHADER,  dataPath +  "/qt-example/shader.vert"),
+            globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "/qt-example/shader.frag"));
 
         m_cornerBuffer->setData(std::array<glm::vec2, 4>{ {
                 glm::vec2(0, 0), glm::vec2(1, 0), glm::vec2(0, 1), glm::vec2(1, 1) } }, GL_STATIC_DRAW);
diff --git a/source/examples/shaderincludes/datapath.inl b/source/examples/shaderincludes/datapath.inl
index 9a93c336..455897f5 100644
--- a/source/examples/shaderincludes/datapath.inl
+++ b/source/examples/shaderincludes/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/shaderincludes", "share/globjects/shaderincludes", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/shaderincludes/main.cpp b/source/examples/shaderincludes/main.cpp
index 307c40f1..7cfb5301 100644
--- a/source/examples/shaderincludes/main.cpp
+++ b/source/examples/shaderincludes/main.cpp
@@ -3,11 +3,11 @@
 #include <algorithm>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <glm/vec2.hpp>
 
@@ -37,10 +37,10 @@ namespace
 
 void initialize()
 {
-    const auto dataPath = common::retrieveDataPath("globjects", "dataPath");
-    globjects::NamedString::create("/color.glsl", new globjects::File(dataPath + "shaderincludes/color.glsl"));
+    const auto dataPath = common::determineDataPath();
+    globjects::NamedString::create("/color.glsl", new globjects::File(dataPath + "/shaderincludes/color.glsl"));
 
-    g_quad = new ScreenAlignedQuad(globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "shaderincludes/test.frag"));
+    g_quad = new ScreenAlignedQuad(globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "/shaderincludes/test.frag"));
     g_quad->ref();
 }
 
@@ -110,9 +110,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     globjects::info() << "Press F5 to reload shaders." << std::endl << std::endl;
 
diff --git a/source/examples/sparsetexture/datapath.inl b/source/examples/sparsetexture/datapath.inl
index 9a93c336..d08115f5 100644
--- a/source/examples/sparsetexture/datapath.inl
+++ b/source/examples/sparsetexture/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/sparsetexture", "share/globjects/sparsetexture", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/sparsetexture/main.cpp b/source/examples/sparsetexture/main.cpp
index 5b9a70f7..c79528a9 100644
--- a/source/examples/sparsetexture/main.cpp
+++ b/source/examples/sparsetexture/main.cpp
@@ -8,8 +8,9 @@
 
 #include <glbinding/gl/gl.h>
 #include <glbinding/gl/extension.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -201,9 +202,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     glfwGetFramebufferSize(window, &g_size[0], &g_size[1]);
     initialize();
diff --git a/source/examples/ssbo/datapath.inl b/source/examples/ssbo/datapath.inl
index 9a93c336..c73b3126 100644
--- a/source/examples/ssbo/datapath.inl
+++ b/source/examples/ssbo/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/ssbo", "share/globjects/ssbo", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/ssbo/main.cpp b/source/examples/ssbo/main.cpp
index bceda55b..3a36c697 100644
--- a/source/examples/ssbo/main.cpp
+++ b/source/examples/ssbo/main.cpp
@@ -6,12 +6,12 @@
 #include <glm/vec2.hpp>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
 
 #include <glbinding/gl/gl.h>
 #include <glbinding/gl/extension.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -40,8 +40,8 @@ namespace
 
 void initialize()
 {
-    const auto dataPath = common::retrieveDataPath("globjects", "dataPath");
-    g_quad = new ScreenAlignedQuad(globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "ssbo/ssbo.frag"));
+    const auto dataPath = common::determineDataPath();
+    g_quad = new ScreenAlignedQuad(globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "/ssbo/ssbo.frag"));
     g_quad->ref();
 
     g_quad->program()->setUniform("maximum",     10);
@@ -132,9 +132,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     globjects::info() << "Press F5 to reload shaders." << std::endl << std::endl;
 
diff --git a/source/examples/states/datapath.inl b/source/examples/states/datapath.inl
index 9a93c336..e80536c2 100644
--- a/source/examples/states/datapath.inl
+++ b/source/examples/states/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/states", "share/globjects/states", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/states/main.cpp b/source/examples/states/main.cpp
index 0d3426ca..7e46a08b 100644
--- a/source/examples/states/main.cpp
+++ b/source/examples/states/main.cpp
@@ -3,13 +3,13 @@
 #include <algorithm>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
 
 #include <glm/vec2.hpp>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -80,10 +80,10 @@ void initialize()
     g_shaderProgram = new globjects::Program();
     g_shaderProgram->ref();
 
-    const auto dataPath = common::retrieveDataPath("globjects", "dataPath");
+    const auto dataPath = common::determineDataPath();
     g_shaderProgram->attach(
-        globjects::Shader::fromFile(GL_VERTEX_SHADER, dataPath + "states/standard.vert")
-      , globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "states/standard.frag"));
+        globjects::Shader::fromFile(GL_VERTEX_SHADER, dataPath + "/states/standard.vert")
+      , globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "/states/standard.frag"));
     
     static auto data = std::vector<glm::vec2>(); 
     if (data.empty())
@@ -214,9 +214,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     globjects::info() << "Press F5 to reload shaders." << std::endl << std::endl;
 
diff --git a/source/examples/tessellation/datapath.inl b/source/examples/tessellation/datapath.inl
index 9a93c336..a75b3efe 100644
--- a/source/examples/tessellation/datapath.inl
+++ b/source/examples/tessellation/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/tessellation", "share/globjects/tessellation", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/tessellation/main.cpp b/source/examples/tessellation/main.cpp
index 5c2f75d5..97ce14b5 100644
--- a/source/examples/tessellation/main.cpp
+++ b/source/examples/tessellation/main.cpp
@@ -4,15 +4,15 @@
 #include <algorithm>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
 
 #include <glm/glm.hpp>
 
 #include <glm/gtx/transform.hpp>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -59,14 +59,14 @@ void initialize()
 {
     g_sphere = new globjects::Program();
     g_sphere->ref();
-    const auto dataPath = common::retrieveDataPath("globjects", "dataPath");
+    const auto dataPath = common::determineDataPath();
     g_sphere->attach(
-        globjects::Shader::fromFile(GL_VERTEX_SHADER,          dataPath + "tessellation/sphere.vert")
-    ,   globjects::Shader::fromFile(GL_TESS_CONTROL_SHADER,    dataPath + "tessellation/sphere.tcs")
-    ,   globjects::Shader::fromFile(GL_TESS_EVALUATION_SHADER, dataPath + "tessellation/sphere.tes")
-    ,   globjects::Shader::fromFile(GL_GEOMETRY_SHADER,        dataPath + "tessellation/sphere.geom")
-    ,   globjects::Shader::fromFile(GL_FRAGMENT_SHADER,        dataPath + "tessellation/sphere.frag")
-    ,   globjects::Shader::fromFile(GL_FRAGMENT_SHADER,        dataPath + "tessellation/phong.frag"));
+        globjects::Shader::fromFile(GL_VERTEX_SHADER,          dataPath + "/tessellation/sphere.vert")
+    ,   globjects::Shader::fromFile(GL_TESS_CONTROL_SHADER,    dataPath + "/tessellation/sphere.tcs")
+    ,   globjects::Shader::fromFile(GL_TESS_EVALUATION_SHADER, dataPath + "/tessellation/sphere.tes")
+    ,   globjects::Shader::fromFile(GL_GEOMETRY_SHADER,        dataPath + "/tessellation/sphere.geom")
+    ,   globjects::Shader::fromFile(GL_FRAGMENT_SHADER,        dataPath + "/tessellation/sphere.frag")
+    ,   globjects::Shader::fromFile(GL_FRAGMENT_SHADER,        dataPath + "/tessellation/phong.frag"));
 
     g_icosahedron = new Icosahedron();
     g_icosahedron->ref();
@@ -155,9 +155,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     globjects::info() << "Press F5 to reload shaders." << std::endl << std::endl;
 
diff --git a/source/examples/texture/main.cpp b/source/examples/texture/main.cpp
index 776690c8..2816c63b 100644
--- a/source/examples/texture/main.cpp
+++ b/source/examples/texture/main.cpp
@@ -6,8 +6,9 @@
 #include <glm/vec2.hpp>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -121,9 +122,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     globjects::info() << "Press F5 to reload shaders." << std::endl << std::endl;
 
diff --git a/source/examples/transformfeedback/datapath.inl b/source/examples/transformfeedback/datapath.inl
index 9a93c336..8b31f92c 100644
--- a/source/examples/transformfeedback/datapath.inl
+++ b/source/examples/transformfeedback/datapath.inl
@@ -1,38 +1,22 @@
 
+
 #include <string>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
+
+#include <globjects/globjects.h>
 
 
 namespace common
 {
 
-    std::string normalizePath(const std::string & filepath)
-    {
-        auto copy = filepath;
-        std::replace(copy.begin(), copy.end(), '\\', '/');
-
-        auto i = copy.find_last_of('/');
-        if (i == copy.size() - 1)
-            copy = copy.substr(0, copy.size() - 1);
-
-        return copy;
-    }
-
-    std::string retrieveDataPath(const std::string & module, const std::string & key)
-    {
-        const auto moduleInfo = cpplocate::findModule(module);
-
-        auto dataPath = moduleInfo.value(key);
-        dataPath = normalizePath(dataPath);
-
-        if (dataPath.empty())
-            dataPath = "data/";
-        else
-            dataPath += "/";
+std::string determineDataPath()
+{
+    std::string path = cpplocate::locatePath("data/transformfeedback", "share/globjects/transformfeedback", reinterpret_cast<void *>(&globjects::detachAllObjects));
+    if (path.empty()) path = "./data";
+    else              path = path + "/data";
 
-        return dataPath;
-    }
+    return path;
+}
 
-}
\ No newline at end of file
+}
diff --git a/source/examples/transformfeedback/main.cpp b/source/examples/transformfeedback/main.cpp
index 816a475b..b06cfb57 100644
--- a/source/examples/transformfeedback/main.cpp
+++ b/source/examples/transformfeedback/main.cpp
@@ -4,15 +4,15 @@
 #include <algorithm>
 
 #include <cpplocate/cpplocate.h>
-#include <cpplocate/ModuleInfo.h>
 
 #include <glm/vec2.hpp>
 #include <glm/vec4.hpp>
 #include <glm/gtx/transform.hpp>
 
 #include <glbinding/gl/gl.h>
-#include <glbinding/ContextInfo.h>
 #include <glbinding/Version.h>
+#include <glbinding-aux/ContextInfo.h>
+#include <glbinding-aux/types_to_string.h>
 
 #include <GLFW/glfw3.h>
 
@@ -53,16 +53,16 @@ void initialize()
 {
     g_shaderProgram = new globjects::Program();
     g_shaderProgram->ref();
-    
-    const auto dataPath = common::retrieveDataPath("globjects", "dataPath");
+
+    const auto dataPath = common::determineDataPath();
     g_shaderProgram->attach(
-        globjects::Shader::fromFile(GL_VERTEX_SHADER,   dataPath + "transformfeedback/simple.vert")
-      , globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "transformfeedback/simple.frag"));
+        globjects::Shader::fromFile(GL_VERTEX_SHADER,   dataPath + "/transformfeedback/simple.vert")
+      , globjects::Shader::fromFile(GL_FRAGMENT_SHADER, dataPath + "/transformfeedback/simple.frag"));
 
     g_transformFeedbackProgram = new globjects::Program();
     g_transformFeedbackProgram->ref();
     g_transformFeedbackProgram->attach(
-        globjects::Shader::fromFile(GL_VERTEX_SHADER, dataPath + "transformfeedback/transformfeedback.vert"));
+        globjects::Shader::fromFile(GL_VERTEX_SHADER, dataPath + "/transformfeedback/transformfeedback.vert"));
 
     g_transformFeedbackProgram->setUniform("deltaT", 0.0f);
 
@@ -225,9 +225,9 @@ int main(int /*argc*/, char * /*argv*/[])
     globjects::init();
 
     std::cout << std::endl
-        << "OpenGL Version:  " << glbinding::ContextInfo::version() << std::endl
-        << "OpenGL Vendor:   " << glbinding::ContextInfo::vendor() << std::endl
-        << "OpenGL Renderer: " << glbinding::ContextInfo::renderer() << std::endl << std::endl;
+        << "OpenGL Version:  " << glbinding::aux::ContextInfo::version() << std::endl
+        << "OpenGL Vendor:   " << glbinding::aux::ContextInfo::vendor() << std::endl
+        << "OpenGL Renderer: " << glbinding::aux::ContextInfo::renderer() << std::endl << std::endl;
 
     globjects::info() << "Press F5 to reload shaders." << std::endl << std::endl;
 
diff --git a/source/globjects/CMakeLists.txt b/source/globjects/CMakeLists.txt
index 86e315ad..844e06ad 100644
--- a/source/globjects/CMakeLists.txt
+++ b/source/globjects/CMakeLists.txt
@@ -358,6 +358,7 @@ target_link_libraries(${target}
     PUBLIC
     ${DEFAULT_LIBRARIES}
     glbinding::glbinding
+    glbinding::glbinding-aux
 
     INTERFACE
 )
diff --git a/source/globjects/source/Framebuffer.cpp b/source/globjects/source/Framebuffer.cpp
index d4ff57f8..ab381ef5 100644
--- a/source/globjects/source/Framebuffer.cpp
+++ b/source/globjects/source/Framebuffer.cpp
@@ -5,7 +5,7 @@
 
 #include <glbinding/gl/functions.h>
 #include <glbinding/gl/enum.h>
-#include <glbinding/Meta.h>
+#include <glbinding-aux/Meta.h>
 
 #include <glm/gtc/type_ptr.hpp>
 
@@ -340,7 +340,7 @@ GLenum Framebuffer::checkStatus() const
 
 std::string Framebuffer::statusString() const
 {
-    return glbinding::Meta::getString(checkStatus());
+    return glbinding::aux::Meta::getString(checkStatus());
 }
 
 void Framebuffer::printStatus(bool onlyErrors) const
@@ -351,7 +351,7 @@ void Framebuffer::printStatus(bool onlyErrors) const
 
 	if (status == GL_FRAMEBUFFER_COMPLETE)
 	{
-        info() << glbinding::Meta::getString(GL_FRAMEBUFFER_COMPLETE);
+        info() << glbinding::aux::Meta::getString(GL_FRAMEBUFFER_COMPLETE);
 	}
 	else
 	{
@@ -359,7 +359,7 @@ void Framebuffer::printStatus(bool onlyErrors) const
 		ss.flags(std::ios::hex | std::ios::showbase);
         ss << static_cast<unsigned int>(status);
 
-        critical() << glbinding::Meta::getString(status) << " (" << ss.str() << ")";
+        critical() << glbinding::aux::Meta::getString(status) << " (" << ss.str() << ")";
 	}
 }
 
diff --git a/source/globjects/source/FramebufferAttachment.cpp b/source/globjects/source/FramebufferAttachment.cpp
index c4b14be2..01f00ddc 100644
--- a/source/globjects/source/FramebufferAttachment.cpp
+++ b/source/globjects/source/FramebufferAttachment.cpp
@@ -3,7 +3,7 @@
 
 #include <string>
 
-#include <glbinding/Meta.h>
+#include <glbinding-aux/Meta.h>
 
 #include <globjects/Framebuffer.h>
 
@@ -42,7 +42,7 @@ bool FramebufferAttachment::isRenderBufferAttachment() const
 
 std::string FramebufferAttachment::attachmentString() const
 {
-    return glbinding::Meta::getString(m_attachment);
+    return glbinding::aux::Meta::getString(m_attachment);
 }
 
 AttachedTexture * FramebufferAttachment::asTextureAttachment()
diff --git a/source/globjects/source/glbindinglogging.cpp b/source/globjects/source/glbindinglogging.cpp
index 59b4b8de..a38e4844 100644
--- a/source/globjects/source/glbindinglogging.cpp
+++ b/source/globjects/source/glbindinglogging.cpp
@@ -5,8 +5,9 @@
 #include <iostream>
 
 #include <glbinding/Version.h>
-#include <glbinding/Meta.h>
+#include <glbinding-aux/Meta.h>
 #include <glbinding/Value.h>
+#include <glbinding-aux/types_to_string.h>
 
 
 namespace globjects 
@@ -22,21 +23,21 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const glbinding::Version
 
 LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::GLboolean & value)
 {
-    builder << glbinding::Meta::getString(value);
+    builder << glbinding::aux::Meta::getString(value);
 
     return builder;
 }
 
 LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::GLenum & value)
 {
-    builder << glbinding::Meta::getString(value);
+    builder << glbinding::aux::Meta::getString(value);
 
     return builder;
 }
 
 LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::GLextension & value)
 {
-    builder << glbinding::Meta::getString(value);
+    builder << glbinding::aux::Meta::getString(value);
 
     return builder;
 }
@@ -45,7 +46,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::AttribMask & v
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::AttribMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -56,7 +57,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::ClearBufferMas
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::ClearBufferMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -67,7 +68,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::ClientAttribMa
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::ClientAttribMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -78,7 +79,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::ContextFlagMas
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::ContextFlagMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -89,7 +90,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::ContextProfile
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::ContextProfileMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -100,7 +101,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::FfdMaskSGIX &
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::FfdMaskSGIX>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -111,7 +112,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::FragmentShader
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::FragmentShaderColorModMaskATI>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -122,7 +123,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::FragmentShader
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::FragmentShaderDestMaskATI>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -133,7 +134,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::FragmentShader
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::FragmentShaderDestModMaskATI>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -144,7 +145,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::MapBufferUsage
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::MapBufferUsageMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -155,7 +156,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::MemoryBarrierM
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::MemoryBarrierMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -166,7 +167,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::PathRenderingM
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::PathRenderingMaskNV>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -177,7 +178,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::PerformanceQue
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::PerformanceQueryCapsMaskINTEL>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -188,7 +189,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::SyncObjectMask
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::SyncObjectMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -199,7 +200,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::TextureStorage
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::TextureStorageMaskAMD>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -210,7 +211,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::UseProgramStag
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::UseProgramStageMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -221,7 +222,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::VertexHintsMas
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::VertexHintsMaskPGI>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -232,7 +233,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::PathFontStyle
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::PathFontStyle>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -243,7 +244,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::UnusedMask & v
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::UnusedMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
@@ -254,7 +255,7 @@ LogMessageBuilder operator<<(LogMessageBuilder builder, const gl::BufferAccessMa
 {
     std::ostringstream stream;
 
-    glbinding::Value<gl::BufferAccessMask>(value).printOn(stream);
+    stream << value;
 
     builder << stream.str();
 
diff --git a/source/globjects/source/globjects.cpp b/source/globjects/source/globjects.cpp
index b7e097d8..ab88e9a6 100644
--- a/source/globjects/source/globjects.cpp
+++ b/source/globjects/source/globjects.cpp
@@ -4,12 +4,12 @@
 #include <unordered_map>
 #include <mutex>
 
+#include <glbinding/glbinding.h>
 #include <glbinding/gl/gl.h>
 #include <glbinding/gl/functions.h>
 #include <glbinding/AbstractFunction.h>
 #include <glbinding/Binding.h>
-#include <glbinding/callbacks.h>
-#include <glbinding/ContextInfo.h>
+#include <glbinding-aux/ContextInfo.h>
 #include <glbinding/Version.h>
 
 #include <globjects/Error.h>
@@ -136,18 +136,14 @@ void detachAllObjects()
 
 void registerCurrentContext()
 {
-    glbinding::ContextHandle contextId = glbinding::getCurrentContext();
-
-    glbinding::Binding::useContext(contextId);
-    Registry::registerContext(contextId);
+    glbinding::Binding::useCurrentContext();
+    Registry::registerContext(0);
 }
 
 void registerCurrentContext(const glbinding::ContextHandle sharedContextId)
 {
-    glbinding::ContextHandle contextId = glbinding::getCurrentContext();
-
-    glbinding::Binding::useContext(contextId);
-    Registry::registerContext(contextId, sharedContextId);
+    glbinding::Binding::useCurrentContext();
+    Registry::registerContext(0, sharedContextId);
 }
 
 void setContext(const glbinding::ContextHandle contextId)
@@ -158,8 +154,7 @@ void setContext(const glbinding::ContextHandle contextId)
 
 void setCurrentContext()
 {
-    glbinding::ContextHandle contextId = glbinding::getCurrentContext();
-    setContext(contextId);
+    setContext(0);
 }
 
 std::string getString(const GLenum pname)
@@ -260,12 +255,12 @@ GLboolean getBoolean(const GLenum pname, const GLuint index)
 
 std::string vendor()
 {
-    return glbinding::ContextInfo::vendor();
+    return glbinding::aux::ContextInfo::vendor();
 }
 
 std::string renderer()
 {
-    return glbinding::ContextInfo::renderer();
+    return glbinding::aux::ContextInfo::renderer();
 }
 
 std::string versionString()
@@ -275,7 +270,7 @@ std::string versionString()
 
 glbinding::Version version()
 {
-    return glbinding::ContextInfo::version();
+    return glbinding::aux::ContextInfo::version();
 }
 
 bool isCoreProfile()
diff --git a/source/globjects/source/implementations/DebugImplementation_DebugKHR.cpp b/source/globjects/source/implementations/DebugImplementation_DebugKHR.cpp
index 62711be6..b3aa9f93 100644
--- a/source/globjects/source/implementations/DebugImplementation_DebugKHR.cpp
+++ b/source/globjects/source/implementations/DebugImplementation_DebugKHR.cpp
@@ -1,7 +1,7 @@
 
 #include "DebugImplementation_DebugKHR.h"
 
-#include <glbinding/callbacks.h>
+#include <glbinding/glbinding.h>
 
 #include <glbinding/gl/enum.h>
 #include <glbinding/gl/functions.h>
diff --git a/source/globjects/source/implementations/DebugImplementation_Legacy.cpp b/source/globjects/source/implementations/DebugImplementation_Legacy.cpp
index c0f64970..003f0cf2 100644
--- a/source/globjects/source/implementations/DebugImplementation_Legacy.cpp
+++ b/source/globjects/source/implementations/DebugImplementation_Legacy.cpp
@@ -1,7 +1,7 @@
 
 #include "DebugImplementation_Legacy.h"
 
-#include <glbinding/callbacks.h>
+#include <glbinding/glbinding.h>
 
 using namespace gl;
 
diff --git a/source/globjects/source/registry/ExtensionRegistry.cpp b/source/globjects/source/registry/ExtensionRegistry.cpp
index 51f15f50..6884b796 100644
--- a/source/globjects/source/registry/ExtensionRegistry.cpp
+++ b/source/globjects/source/registry/ExtensionRegistry.cpp
@@ -2,8 +2,8 @@
 #include "ExtensionRegistry.h"
 #include "Registry.h"
 
-#include <glbinding/Meta.h>
-#include <glbinding/ContextInfo.h>
+#include <glbinding-aux/Meta.h>
+#include <glbinding-aux/ContextInfo.h>
 #include <glbinding/Version.h>
 
 #include <globjects/globjects.h>
@@ -11,6 +11,19 @@
 using namespace gl;
 
 
+namespace
+{
+
+
+glbinding::Version getCoreVersion(GLextension extension)
+{
+    return glbinding::aux::Meta::version(extension);
+}
+
+
+}
+
+
 namespace globjects 
 {
 
@@ -53,7 +66,7 @@ void ExtensionRegistry::initialize()
     if (m_initialized)
         return;
 
-    m_availableExtensions = glbinding::ContextInfo::extensions(m_unknownAvailableExtensions);
+    m_availableExtensions = glbinding::aux::ContextInfo::extensions(m_unknownAvailableExtensions);
 
     m_initialized = true;
 }
@@ -72,7 +85,7 @@ bool ExtensionRegistry::hasExtension(const std::string & extensionName)
 {
     initialize();
 
-    GLextension extension = glbinding::Meta::getExtension(extensionName);
+    GLextension extension = glbinding::aux::Meta::getExtension(extensionName);
 
     if (extension != GLextension::UNKNOWN)
     {
@@ -84,16 +97,11 @@ bool ExtensionRegistry::hasExtension(const std::string & extensionName)
     }
 }
 
-glbinding::Version getCoreVersion(GLextension extension)
-{
-    return glbinding::Meta::version(extension);
-}
-
 bool ExtensionRegistry::isInCoreProfile(GLextension extension, const glbinding::Version & version)
 {
     glbinding::Version coreVersion = getCoreVersion(extension);
 
-    if (!coreVersion.isValid())
+    if (coreVersion.isNull())
         return false;
 
     return coreVersion <= version;
-- 
2.21.0

