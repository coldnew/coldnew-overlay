diff -up pcmanx-gtk2-0.3.8/plugin/src/np_entry.cpp.xul pcmanx-gtk2-0.3.8/plugin/src/np_entry.cpp
--- pcmanx-gtk2-0.3.8/plugin/src/np_entry.cpp.xul	2009-01-07 22:39:27.000000000 +0100
+++ pcmanx-gtk2-0.3.8/plugin/src/np_entry.cpp	2009-01-07 22:39:51.000000000 +0100
@@ -40,6 +40,7 @@
 // Main plugin entry point implementation -- exports from the 
 // plugin library
 //
+#include "mozilla-config.h"
 #include "npplat.h"
 #include "pluginbase.h"
 
diff -up pcmanx-gtk2-0.3.8/plugin/src/npn_gate.cpp.xul pcmanx-gtk2-0.3.8/plugin/src/npn_gate.cpp
--- pcmanx-gtk2-0.3.8/plugin/src/npn_gate.cpp.xul	2008-08-10 09:06:29.000000000 +0200
+++ pcmanx-gtk2-0.3.8/plugin/src/npn_gate.cpp	2009-01-07 22:36:21.000000000 +0100
@@ -42,6 +42,138 @@
 //
 #include "npplat.h"
 
+// For 1.9 compatibility
+// ------------------------------------------------
+
+typedef NPError (*NPN_GetURLNotifyUPP)(NPP instance, const char* url, const char* window, void* notifyData);
+#define NewNPN_GetURLNotifyProc(FUNC)   \
+    ((NPN_GetURLNotifyUPP) (FUNC))
+#define CallNPN_GetURLNotifyProc(FUNC, ARG1, ARG2, ARG3, ARG4)    \
+    (*(FUNC))((ARG1), (ARG2), (ARG3), (ARG4))
+
+typedef NPError (*NPN_GetURLUPP)(NPP instance, const char* url, const char* window);
+#define NewNPN_GetURLProc(FUNC)   \
+    ((NPN_GetURLUPP) (FUNC))
+#define CallNPN_GetURLProc(FUNC, ARG1, ARG2, ARG3)    \
+    (*(FUNC))((ARG1), (ARG2), (ARG3))
+
+typedef NPError (*NPN_PostURLNotifyUPP)(NPP instance, const char* url, const char* window, uint32_t len, const char* buf, NPBool file, void* notifyData);
+#define NewNPN_PostURLNotifyProc(FUNC)    \
+    ((NPN_PostURLNotifyUPP) (FUNC))
+#define CallNPN_PostURLNotifyProc(FUNC, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6, ARG7) \
+    (*(FUNC))((ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6), (ARG7))
+
+typedef NPError (*NPN_PostURLUPP)(NPP instance, const char* url, const char* window, uint32_t len, const char* buf, NPBool file);
+#define NewNPN_PostURLProc(FUNC)    \
+    ((NPN_PostURLUPP) (FUNC))
+#define CallNPN_PostURLProc(FUNC, ARG1, ARG2, ARG3, ARG4, ARG5, ARG6) \
+    (*(FUNC))((ARG1), (ARG2), (ARG3), (ARG4), (ARG5), (ARG6))
+
+typedef NPError (*NPN_RequestReadUPP)(NPStream* stream, NPByteRange* rangeList);
+#define NewNPN_RequestReadProc(FUNC)    \
+    ((NPN_RequestReadUPP) (FUNC))
+#define CallNPN_RequestReadProc(FUNC, stream, range)    \
+    (*(FUNC))((stream), (range))
+
+typedef NPError (*NPN_NewStreamUPP)(NPP instance, NPMIMEType type, const char* window, NPStream** stream);
+#define NewNPN_NewStreamProc(FUNC)    \
+    ((NPN_NewStreamUPP) (FUNC))
+#define CallNPN_NewStreamProc(FUNC, npp, type, window, stream)    \
+    (*(FUNC))((npp), (type), (window), (stream))
+
+typedef int32_t (*NPN_WriteUPP)(NPP instance, NPStream* stream, int32_t len, void* buffer);
+#define NewNPN_WriteProc(FUNC)    \
+    ((NPN_WriteUPP) (FUNC))
+#define CallNPN_WriteProc(FUNC, npp, stream, len, buffer)   \
+    (*(FUNC))((npp), (stream), (len), (buffer))
+
+typedef NPError (*NPN_DestroyStreamUPP)(NPP instance, NPStream* stream, NPReason reason);
+#define NewNPN_DestroyStreamProc(FUNC)    \
+    ((NPN_DestroyStreamUPP) (FUNC))
+#define CallNPN_DestroyStreamProc(FUNC, npp, stream, reason)    \
+    (*(FUNC))((npp), (stream), (reason))
+
+typedef void (*NPN_StatusUPP)(NPP instance, const char* message);
+#define NewNPN_StatusProc(FUNC)   \
+    ((NPN_StatusUPP) (FUNC))
+#define CallNPN_StatusProc(FUNC, npp, msg)    \
+    (*(FUNC))((npp), (msg)) 
+
+typedef const char* (*NPN_UserAgentUPP)(NPP instance);
+#define NewNPN_UserAgentProc(FUNC)              \
+                ((NPN_UserAgentUPP) (FUNC))
+#define CallNPN_UserAgentProc(FUNC, ARG1)               \
+                (*(FUNC))((ARG1))
+
+typedef void* (*NPN_MemAllocUPP)(uint32_t size);
+#define NewNPN_MemAllocProc(FUNC)   \
+    ((NPN_MemAllocUPP) (FUNC))
+#define CallNPN_MemAllocProc(FUNC, ARG1)    \
+    (*(FUNC))((ARG1)) 
+
+typedef void (*NPN_MemFreeUPP)(void* ptr);
+#define NewNPN_MemFreeProc(FUNC)    \
+    ((NPN_MemFreeUPP) (FUNC))
+#define CallNPN_MemFreeProc(FUNC, ARG1)   \
+    (*(FUNC))((ARG1)) 
+
+typedef void (*NPN_ReloadPluginsUPP)(NPBool reloadPages);
+#define NewNPN_ReloadPluginsProc(FUNC)    \
+    ((NPN_ReloadPluginsUPP) (FUNC))
+#define CallNPN_ReloadPluginsProc(FUNC, ARG1)   \
+    (*(FUNC))((ARG1)) 
+
+typedef uint32_t (*NPN_MemFlushUPP)(uint32_t size);
+#define NewNPN_MemFlushProc(FUNC)   \
+    ((NPN_MemFlushUPP) (FUNC))
+#define CallNPN_MemFlushProc(FUNC, ARG1)    \
+    (*(FUNC))((ARG1)) 
+
+typedef NPError (*NPN_GetValueUPP)(NPP instance, NPNVariable variable, void *ret_alue);
+#define NewNPN_GetValueProc(FUNC)   \
+    ((NPN_GetValueUPP) (FUNC))
+#define CallNPN_GetValueProc(FUNC, ARG1, ARG2, ARG3)    \
+    (*(FUNC))((ARG1), (ARG2), (ARG3))
+
+typedef NPError (*NPN_SetValueUPP)(NPP instance, NPPVariable variable, void *ret_alue);
+#define NewNPN_SetValueProc(FUNC)   \
+    ((NPN_SetValueUPP) (FUNC))
+#define CallNPN_SetValueProc(FUNC, ARG1, ARG2, ARG3)    \
+    (*(FUNC))((ARG1), (ARG2), (ARG3))
+
+typedef void (*NPN_InvalidateRectUPP)(NPP instance, NPRect *rect);
+#define NewNPN_InvalidateRectProc(FUNC)   \
+    ((NPN_InvalidateRectUPP) (FUNC))
+#define CallNPN_InvalidateRectProc(FUNC, ARG1, ARG2)    \
+    (*(FUNC))((ARG1), (ARG2)) 
+
+typedef void (*NPN_InvalidateRegionUPP)(NPP instance, NPRegion region);
+#define NewNPN_InvalidateRegionProc(FUNC)   \
+    ((NPN_InvalidateRegionUPP) (FUNC))
+#define CallNPN_InvalidateRegionProc(FUNC, ARG1, ARG2)    \
+    (*(FUNC))((ARG1), (ARG2)) 
+
+typedef void (*NPN_ForceRedrawUPP)(NPP instance);
+#define NewNPN_ForceRedrawProc(FUNC)    \
+    ((NPN_ForceRedrawUPP) (FUNC))
+#define CallNPN_ForceRedrawProc(FUNC, ARG1)   \
+    (*(FUNC))((ARG1)) 
+
+typedef JRIEnv* (* NP_LOADDS NPN_GetJavaEnvUPP)(void);
+#define NewNPN_GetJavaEnvProc(FUNC)             \
+                ((NPN_GetJavaEnvUPP) (FUNC))
+#define CallNPN_GetJavaEnvProc(FUNC)            \
+                (*(FUNC))()
+
+typedef jref (* NP_LOADDS NPN_GetJavaPeerUPP)(NPP instance);
+#define NewNPN_GetJavaPeerProc(FUNC)            \
+                ((NPN_GetJavaPeerUPP) (FUNC))
+#define CallNPN_GetJavaPeerProc(FUNC, ARG1)             \
+                (*(FUNC))((ARG1))       
+
+// ------------------------------------------------
+
+
 extern NPNetscapeFuncs NPNFuncs;
 
 void NPN_Version(int* plugin_major, int* plugin_minor, int* netscape_major, int* netscape_minor)
@@ -71,7 +203,7 @@
   return rv;
 }
 
-NPError NPN_PostURLNotify(NPP instance, const char* url, const char* window, uint32 len, const char* buf, NPBool file, void* notifyData)
+NPError NPN_PostURLNotify(NPP instance, const char* url, const char* window, uint32_t len, const char* buf, NPBool file, void* notifyData)
 {
 	int navMinorVers = NPNFuncs.version & 0xFF;
   NPError rv = NPERR_NO_ERROR;
@@ -84,7 +216,7 @@
   return rv;
 }
 
-NPError NPN_PostURL(NPP instance, const char* url, const char* window, uint32 len, const char* buf, NPBool file)
+NPError NPN_PostURL(NPP instance, const char* url, const char* window, uint32_t len, const char* buf, NPBool file)
 {
   NPError rv = CallNPN_PostURLProc(NPNFuncs.posturl, instance, url, window, len, buf, file);
   return rv;
@@ -110,10 +242,10 @@
   return rv;
 }
 
-int32 NPN_Write(NPP instance, NPStream *stream, int32 len, void *buffer)
+int32_t NPN_Write(NPP instance, NPStream *stream, int32_t len, void *buffer)
 {
 	int navMinorVersion = NPNFuncs.version & 0xFF;
-  int32 rv = 0;
+  int32_t rv = 0;
 
   if( navMinorVersion >= NPVERS_HAS_STREAMOUTPUT )
 		rv = CallNPN_WriteProc(NPNFuncs.write, instance, stream, len, buffer);
@@ -143,12 +275,12 @@
 
 const char* NPN_UserAgent(NPP instance)
 {
-  const char * rv = NULL;
+  const char * rv = (const char *)NULL;
   rv = CallNPN_UserAgentProc(NPNFuncs.uagent, instance);
   return rv;
 }
 
-void* NPN_MemAlloc(uint32 size)
+void* NPN_MemAlloc(uint32_t size)
 {
   void * rv = NULL;
   rv = CallNPN_MemAllocProc(NPNFuncs.memalloc, size);
@@ -160,9 +292,9 @@
   CallNPN_MemFreeProc(NPNFuncs.memfree, ptr);
 }
 
-uint32 NPN_MemFlush(uint32 size)
+uint32_t NPN_MemFlush(uint32_t size)
 {
-  uint32 rv = CallNPN_MemFlushProc(NPNFuncs.memflush, size);
+  uint32_t rv = CallNPN_MemFlushProc(NPNFuncs.memflush, size);
   return rv;
 }
 
@@ -175,14 +307,14 @@
 JRIEnv* NPN_GetJavaEnv(void)
 {
   JRIEnv * rv = NULL;
-	rv = CallNPN_GetJavaEnvProc(NPNFuncs.getJavaEnv);
+	rv = (JRIEnv*)CallNPN_GetJavaEnvProc(NPNFuncs.getJavaEnv);
   return rv;
 }
 
 jref NPN_GetJavaPeer(NPP instance)
 {
   jref rv;
-  rv = CallNPN_GetJavaPeerProc(NPNFuncs.getJavaPeer, instance);
+  rv = (jref)CallNPN_GetJavaPeerProc(NPNFuncs.getJavaPeer, instance);
   return rv;
 }
 #endif
diff -up pcmanx-gtk2-0.3.8/plugin/src/npp_gate.cpp.xul pcmanx-gtk2-0.3.8/plugin/src/npp_gate.cpp
--- pcmanx-gtk2-0.3.8/plugin/src/npp_gate.cpp.xul	2008-08-10 09:06:29.000000000 +0200
+++ pcmanx-gtk2-0.3.8/plugin/src/npp_gate.cpp	2009-01-07 22:36:21.000000000 +0100
@@ -45,7 +45,7 @@
 // here the plugin creates a plugin instance object which 
 // will be associated with this newly created NPP instance and 
 // will do all the necessary job
-NPError NPP_New(NPMIMEType pluginType, NPP instance, uint16 mode, int16 argc, char* argn[], char* argv[], NPSavedData* saved)
+NPError NPP_New(NPMIMEType pluginType, NPP instance, uint16_t mode, int16_t argc, char* argn[], char* argv[], NPSavedData* saved)
 {   
   if(instance == NULL)
     return NPERR_INVALID_INSTANCE_ERROR;
@@ -130,7 +130,7 @@ NPError NPP_SetWindow (NPP instance, NPW
   return rv;
 }
 
-NPError NPP_NewStream(NPP instance, NPMIMEType type, NPStream* stream, NPBool seekable, uint16* stype)
+NPError NPP_NewStream(NPP instance, NPMIMEType type, NPStream* stream, NPBool seekable, uint16_t* stype)
 {
   if(instance == NULL)
     return NPERR_INVALID_INSTANCE_ERROR;
@@ -143,7 +143,7 @@ NPError NPP_NewStream(NPP instance, NPMI
   return rv;
 }
 
-int32 NPP_WriteReady (NPP instance, NPStream *stream)
+int32_t NPP_WriteReady (NPP instance, NPStream *stream)
 {
   if(instance == NULL)
     return 0x0fffffff;
@@ -152,11 +152,11 @@ int32 NPP_WriteReady (NPP instance, NPSt
   if(plugin == NULL) 
     return 0x0fffffff;
 
-  int32 rv = plugin->WriteReady(stream);
+  int32_t rv = plugin->WriteReady(stream);
   return rv;
 }
 
-int32 NPP_Write (NPP instance, NPStream *stream, int32 offset, int32 len, void *buffer)
+int32_t NPP_Write (NPP instance, NPStream *stream, int32_t offset, int32_t len, void *buffer)
 {   
   if(instance == NULL)
     return len;
@@ -165,7 +165,7 @@ int32 NPP_Write (NPP instance, NPStream 
   if(plugin == NULL) 
     return len;
 
-  int32 rv = plugin->Write(stream, offset, len, buffer);
+  int32_t rv = plugin->Write(stream, offset, len, buffer);
   return rv;
 }
 
@@ -244,7 +244,7 @@ NPError NPP_SetValue(NPP instance, NPNVa
   return rv;
 }
 
-int16	NPP_HandleEvent(NPP instance, void* event)
+int16_t	NPP_HandleEvent(NPP instance, void* event)
 {
   if(instance == NULL)
     return 0;
@@ -253,7 +253,7 @@ int16	NPP_HandleEvent(NPP instance, void
   if(plugin == NULL) 
     return 0;
 
-  uint16 rv = plugin->HandleEvent(event);
+  uint16_t rv = plugin->HandleEvent(event);
   return rv;
 }
 
diff -up pcmanx-gtk2-0.3.8/plugin/src/npplat.h.xul pcmanx-gtk2-0.3.8/plugin/src/npplat.h
--- pcmanx-gtk2-0.3.8/plugin/src/npplat.h.xul	2008-08-10 09:06:29.000000000 +0200
+++ pcmanx-gtk2-0.3.8/plugin/src/npplat.h	2009-01-07 22:36:21.000000000 +0100
@@ -39,7 +39,7 @@
 #define _NPPLAT_H_
 
 #include "npapi.h"
-#include "npupp.h"
+#include "npfunctions.h"
 
 /**************************************************/
 /*                                                */
@@ -147,4 +147,8 @@ NPError Private_SetValue(NPP instance, N
 #define LOBYTE(i) (i & 0xff)
 #endif
 
+#ifndef NULL
+#define NULL ((void *)0)
+#endif
+
 #endif //_NPPLAT_H_
diff -up pcmanx-gtk2-0.3.8/plugin/src/pluginbase.h.xul pcmanx-gtk2-0.3.8/plugin/src/pluginbase.h
--- pcmanx-gtk2-0.3.8/plugin/src/pluginbase.h.xul	2008-08-10 09:06:29.000000000 +0200
+++ pcmanx-gtk2-0.3.8/plugin/src/pluginbase.h	2009-01-07 22:36:21.000000000 +0100
@@ -38,14 +38,16 @@
 #ifndef __PLUGININSTANCEBASE_H__
 #define __PLUGININSTANCEBASE_H__
 
+#include "mozilla-config.h"
+#include "npapi.h"
 #include "npplat.h"
 
 struct nsPluginCreateData
 {
   NPP instance;
   NPMIMEType type; 
-  uint16 mode; 
-  int16 argc; 
+  uint16_t mode; 
+  int16_t argc; 
   char** argn; 
   char** argv; 
   NPSavedData* saved;
@@ -64,14 +66,14 @@ public:
   // class as needed
   virtual NPError SetWindow(NPWindow* pNPWindow)                    { return NPERR_NO_ERROR; }
   virtual NPError NewStream(NPMIMEType type, NPStream* stream, 
-                            NPBool seekable, uint16* stype)         { return NPERR_NO_ERROR; }
+                            NPBool seekable, uint16_t* stype)       { return NPERR_NO_ERROR; }
   virtual NPError DestroyStream(NPStream *stream, NPError reason)   { return NPERR_NO_ERROR; }
   virtual void    StreamAsFile(NPStream* stream, const char* fname) { return; }
-  virtual int32   WriteReady(NPStream *stream)                      { return 0x0fffffff; }
-  virtual int32   Write(NPStream *stream, int32 offset, 
-                        int32 len, void *buffer)                    { return len; }
+  virtual int32_t WriteReady(NPStream *stream)                      { return 0x0fffffff; }
+  virtual int32_t Write(NPStream *stream, int32_t offset, 
+                        int32_t len, void *buffer)                  { return len; }
   virtual void    Print(NPPrint* printInfo)                         { return; }
-  virtual uint16  HandleEvent(void* event)                          { return 0; }
+  virtual uint16_t HandleEvent(void* event)                          { return 0; }
   virtual void    URLNotify(const char* url, NPReason reason, 
                             void* notifyData)                       { return; }
   virtual NPError GetValue(NPPVariable variable, void *value)       { return NPERR_NO_ERROR; }
